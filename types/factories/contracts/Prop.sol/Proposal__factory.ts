/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Proposal,
  ProposalInterface,
} from "../../../contracts/Prop.sol/Proposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_ipfsAddr",
        type: "string",
      },
      {
        internalType: "string",
        name: "_payload",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        internalType: "contract Idea",
        name: "_governor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum VoteKind",
        name: "nature",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
    ],
    name: "VoteCast",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "organizer",
        type: "address",
      },
    ],
    name: "VoteStarted",
    type: "event",
  },
  {
    inputs: [],
    name: "active",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum VoteKind",
        name: "nature",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "duration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "expiry",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governor",
    outputs: [
      {
        internalType: "contract Idea",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initiateVotingPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ipfsAddr",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nAffirmative",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nVoters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payload",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b0638038062001b068339818101604052810190620000379190620004b0565b620000576200004b620000e360201b60201c565b620000eb60201b60201c565b83600190805190602001906200006f929190620001af565b50826002908051906020019062000088929190620001af565b5081600681905550600060078190555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620005c5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001bd906200058f565b90600052602060002090601f016020900481019282620001e157600085556200022d565b82601f10620001fc57805160ff19168380011785556200022d565b828001600101855582156200022d579182015b828111156200022c5782518255916020019190600101906200020f565b5b5090506200023c919062000240565b5090565b5b808211156200025b57600081600090555060010162000241565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002c8826200027d565b810181811067ffffffffffffffff82111715620002ea57620002e96200028e565b5b80604052505050565b6000620002ff6200025f565b90506200030d8282620002bd565b919050565b600067ffffffffffffffff82111562000330576200032f6200028e565b5b6200033b826200027d565b9050602081019050919050565b60005b83811015620003685780820151818401526020810190506200034b565b8381111562000378576000848401525b50505050565b6000620003956200038f8462000312565b620002f3565b905082815260208101848484011115620003b457620003b362000278565b5b620003c184828562000348565b509392505050565b600082601f830112620003e157620003e062000273565b5b8151620003f38482602086016200037e565b91505092915050565b6000819050919050565b6200041181620003fc565b81146200041d57600080fd5b50565b600081519050620004318162000406565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004648262000437565b9050919050565b6000620004788262000457565b9050919050565b6200048a816200046b565b81146200049657600080fd5b50565b600081519050620004aa816200047f565b92915050565b60008060008060808587031215620004cd57620004cc62000269565b5b600085015167ffffffffffffffff811115620004ee57620004ed6200026e565b5b620004fc87828801620003c9565b945050602085015167ffffffffffffffff81111562000520576200051f6200026e565b5b6200052e87828801620003c9565b9350506040620005418782880162000420565b9250506060620005548782880162000499565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005a857607f821691505b60208210811415620005bf57620005be62000560565b5b50919050565b61153180620005d56000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638a671dbb1161008c578063e184c9be11610066578063e184c9be14610207578063e53e747f14610225578063f2fde38b1461022f578063f9135be91461024b576100ea565b80638a671dbb146101ad5780638da5cb5b146101cb578063a878f858146101e9576100ea565b80630fb5a6b4116100c85780630fb5a6b4146101495780631f3e74391461016757806364fd9a9414610185578063715018a6146101a3576100ea565b806302fb0c5e146100ef57806305df721e1461010d5780630c340a241461012b575b600080fd5b6100f7610267565b6040516101049190610b56565b60405180910390f35b610115610281565b6040516101229190610c0a565b60405180910390f35b61013361030f565b6040516101409190610cab565b60405180910390f35b610151610335565b60405161015e9190610cdf565b60405180910390f35b61016f61033b565b60405161017c9190610cdf565b60405180910390f35b61018d610341565b60405161019a9190610cdf565b60405180910390f35b6101ab610347565b005b6101b56103cf565b6040516101c29190610cdf565b60405180910390f35b6101d36103d5565b6040516101e09190610d1b565b60405180910390f35b6101f16103fe565b6040516101fe9190610c0a565b60405180910390f35b61020f61048c565b60405161021c9190610cdf565b60405180910390f35b61022d610492565b005b61024960048036038101906102449190610d71565b6105a3565b005b61026560048036038101906102609190610def565b61069b565b005b6000806007541415801561027c575060075442105b905090565b6001805461028e90610e5e565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba90610e5e565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b505050505081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60055481565b60035481565b61034f610a6f565b73ffffffffffffffffffffffffffffffffffffffff1661036d6103d5565b73ffffffffffffffffffffffffffffffffffffffff16146103c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ba90610edc565b60405180910390fd5b6103cd6000610a77565b565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002805461040b90610e5e565b80601f016020809104026020016040519081016040528092919081815260200182805461043790610e5e565b80156104845780601f1061045957610100808354040283529160200191610484565b820191906000526020600020905b81548152906001019060200180831161046757829003601f168201915b505050505081565b60075481565b61049a610a6f565b73ffffffffffffffffffffffffffffffffffffffff166104b86103d5565b73ffffffffffffffffffffffffffffffffffffffff161461050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610edc565b60405180910390fd5b610516610267565b15610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90610f6e565b60405180910390fd5b600654426105649190610fbd565b6007819055507ff5d73fe8629d2adca6c98223b45808a4c7fff59ee582a74fc5f75d2340dd6bf0336040516105999190610d1b565b60405180910390a1565b6105ab610a6f565b73ffffffffffffffffffffffffffffffffffffffff166105c96103d5565b73ffffffffffffffffffffffffffffffffffffffff161461061f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061690610edc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068690611085565b60405180910390fd5b61069881610a77565b50565b6106a3610267565b6106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990611117565b60405180910390fd5b80600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161073e9190610d1b565b60206040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e919061114c565b10156107cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c6906111eb565b60405180910390fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b18f0de2336040518263ffffffff1660e01b815260040161082c9190610d1b565b60606040518083038186803b15801561084457600080fd5b505afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190611342565b90506000816020015114610891576000610894565b60015b60ff16600460008282546108a89190610fbd565b925050819055508181602001516005546108c2919061136f565b6108cc9190610fbd565b600581905550600060018111156108e6576108e56113a3565b5b8360018111156108f9576108f86113a3565b5b141561095e5760008260035461090f9190610fbd565b905060006001811115610925576109246113a3565b5b8260400151600181111561093c5761093b6113a3565b5b141561095557816020015181610952919061136f565b90505b80600381905550505b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166308f1cacd3360405180606001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018760018111156109dd576109dc6113a3565b5b8152506040518363ffffffff1660e01b81526004016109fd92919061148c565b600060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b505050507fd9d9fd0caa964abf9540e87552b03d0f6f1427c14e4d23c647cc9f24efc08488338484604051610a62939291906114c4565b60405180910390a1505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008115159050919050565b610b5081610b3b565b82525050565b6000602082019050610b6b6000830184610b47565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bab578082015181840152602081019050610b90565b83811115610bba576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bdc82610b71565b610be68185610b7c565b9350610bf6818560208601610b8d565b610bff81610bc0565b840191505092915050565b60006020820190508181036000830152610c248184610bd1565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c71610c6c610c6784610c2c565b610c4c565b610c2c565b9050919050565b6000610c8382610c56565b9050919050565b6000610c9582610c78565b9050919050565b610ca581610c8a565b82525050565b6000602082019050610cc06000830184610c9c565b92915050565b6000819050919050565b610cd981610cc6565b82525050565b6000602082019050610cf46000830184610cd0565b92915050565b6000610d0582610c2c565b9050919050565b610d1581610cfa565b82525050565b6000602082019050610d306000830184610d0c565b92915050565b6000604051905090565b600080fd5b610d4e81610cfa565b8114610d5957600080fd5b50565b600081359050610d6b81610d45565b92915050565b600060208284031215610d8757610d86610d40565b5b6000610d9584828501610d5c565b91505092915050565b60028110610dab57600080fd5b50565b600081359050610dbd81610d9e565b92915050565b610dcc81610cc6565b8114610dd757600080fd5b50565b600081359050610de981610dc3565b92915050565b60008060408385031215610e0657610e05610d40565b5b6000610e1485828601610dae565b9250506020610e2585828601610dda565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e7657607f821691505b60208210811415610e8a57610e89610e2f565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ec6602083610b7c565b9150610ed182610e90565b602082019050919050565b60006020820190508181036000830152610ef581610eb9565b9050919050565b7f54686520766f74696e6720706572696f642068617320616c726561647920626560008201527f67756e2e00000000000000000000000000000000000000000000000000000000602082015250565b6000610f58602483610b7c565b9150610f6382610efc565b604082019050919050565b60006020820190508181036000830152610f8781610f4b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fc882610cc6565b9150610fd383610cc6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561100857611007610f8e565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061106f602683610b7c565b915061107a82611013565b604082019050919050565b6000602082019050818103600083015261109e81611062565b9050919050565b7f54686520766f74696e6720706572696f6420686173206e6f742079657420626560008201527f67756e2e00000000000000000000000000000000000000000000000000000000602082015250565b6000611101602483610b7c565b915061110c826110a5565b604082019050919050565b60006020820190508181036000830152611130816110f4565b9050919050565b60008151905061114681610dc3565b92915050565b60006020828403121561116257611161610d40565b5b600061117084828501611137565b91505092915050565b7f496e73756666696369656e742062616c616e636520746f20636173742073706560008201527f636966696564206e756d626572206f6620766f7465732e000000000000000000602082015250565b60006111d5603783610b7c565b91506111e082611179565b604082019050919050565b60006020820190508181036000830152611204816111c8565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61124882610bc0565b810181811067ffffffffffffffff8211171561126757611266611210565b5b80604052505050565b600061127a610d36565b9050611286828261123f565b919050565b600061129682610cfa565b9050919050565b6112a68161128b565b81146112b157600080fd5b50565b6000815190506112c38161129d565b92915050565b6000815190506112d881610d9e565b92915050565b6000606082840312156112f4576112f361120b565b5b6112fe6060611270565b9050600061130e848285016112b4565b600083015250602061132284828501611137565b6020830152506040611336848285016112c9565b60408301525092915050565b60006060828403121561135857611357610d40565b5b6000611366848285016112de565b91505092915050565b600061137a82610cc6565b915061138583610cc6565b92508282101561139857611397610f8e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006113dd82610c78565b9050919050565b6113ed816113d2565b82525050565b6113fc81610cc6565b82525050565b60028110611413576114126113a3565b5b50565b600081905061142482611402565b919050565b600061143482611416565b9050919050565b61144481611429565b82525050565b60608201600082015161146060008501826113e4565b50602082015161147360208501826113f3565b506040820151611486604085018261143b565b50505050565b60006080820190506114a16000830185610d0c565b6114ae602083018461144a565b9392505050565b6114be81611429565b82525050565b60006060820190506114d96000830186610d0c565b6114e660208301856114b5565b6114f36040830184610cd0565b94935050505056fea2646970667358221220bc6dc3202343f0ed247cc8e6cb2288c97b81e32c765f857b71ff718a407bdec264736f6c63430008090033";

type ProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proposal__factory extends ContractFactory {
  constructor(...args: ProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ipfsAddr: PromiseOrValue<string>,
    _payload: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Proposal> {
    return super.deploy(
      _ipfsAddr,
      _payload,
      _duration,
      _governor,
      overrides || {}
    ) as Promise<Proposal>;
  }
  override getDeployTransaction(
    _ipfsAddr: PromiseOrValue<string>,
    _payload: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ipfsAddr,
      _payload,
      _duration,
      _governor,
      overrides || {}
    );
  }
  override attach(address: string): Proposal {
    return super.attach(address) as Proposal;
  }
  override connect(signer: Signer): Proposal__factory {
    return super.connect(signer) as Proposal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProposalInterface {
    return new utils.Interface(_abi) as ProposalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Proposal {
    return new Contract(address, _abi, signerOrProvider) as Proposal;
  }
}
