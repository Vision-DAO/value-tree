/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ProposalInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "castVote(address,uint8,uint256)": FunctionFragment;
    "castVote(uint8,uint256)": FunctionFragment;
    "closeProposal()": FunctionFragment;
    "closedAt()": FunctionFragment;
    "duration()": FunctionFragment;
    "expiry()": FunctionFragment;
    "governor()": FunctionFragment;
    "initiateVotingPeriod()": FunctionFragment;
    "ipfsAddr()": FunctionFragment;
    "nAffirmative()": FunctionFragment;
    "nVoters()": FunctionFragment;
    "nVotes()": FunctionFragment;
    "owner()": FunctionFragment;
    "payload()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "castVote(address,uint8,uint256)"
      | "castVote(uint8,uint256)"
      | "closeProposal"
      | "closedAt"
      | "duration"
      | "expiry"
      | "governor"
      | "initiateVotingPeriod"
      | "ipfsAddr"
      | "nAffirmative"
      | "nVoters"
      | "nVotes"
      | "owner"
      | "payload"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "castVote(address,uint8,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeProposal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "closedAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initiateVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ipfsAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nAffirmative",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nVoters", values?: undefined): string;
  encodeFunctionData(functionFragment: "nVotes", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payload", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVote(address,uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipfsAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nAffirmative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nVoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VoteCast(address,uint8,uint256)": EventFragment;
    "VoteStarted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteStarted"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VoteCastEventObject {
  voter: string;
  nature: number;
  weight: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [string, number, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VoteStartedEventObject {
  organizer: string;
}
export type VoteStartedEvent = TypedEvent<[string], VoteStartedEventObject>;

export type VoteStartedEventFilter = TypedEventFilter<VoteStartedEvent>;

export interface Proposal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProposalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    "castVote(address,uint8,uint256)"(
      voter: PromiseOrValue<string>,
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "castVote(uint8,uint256)"(
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initiateVotingPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ipfsAddr(overrides?: CallOverrides): Promise<[string]>;

    nAffirmative(overrides?: CallOverrides): Promise<[BigNumber]>;

    nVoters(overrides?: CallOverrides): Promise<[BigNumber]>;

    nVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payload(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  "castVote(address,uint8,uint256)"(
    voter: PromiseOrValue<string>,
    nature: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "castVote(uint8,uint256)"(
    nature: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closedAt(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  initiateVotingPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ipfsAddr(overrides?: CallOverrides): Promise<string>;

  nAffirmative(overrides?: CallOverrides): Promise<BigNumber>;

  nVoters(overrides?: CallOverrides): Promise<BigNumber>;

  nVotes(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payload(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    "castVote(address,uint8,uint256)"(
      voter: PromiseOrValue<string>,
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint8,uint256)"(
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeProposal(overrides?: CallOverrides): Promise<void>;

    closedAt(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    initiateVotingPeriod(overrides?: CallOverrides): Promise<void>;

    ipfsAddr(overrides?: CallOverrides): Promise<string>;

    nAffirmative(overrides?: CallOverrides): Promise<BigNumber>;

    nVoters(overrides?: CallOverrides): Promise<BigNumber>;

    nVotes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payload(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "VoteCast(address,uint8,uint256)"(
      voter?: null,
      nature?: null,
      weight?: null
    ): VoteCastEventFilter;
    VoteCast(voter?: null, nature?: null, weight?: null): VoteCastEventFilter;

    "VoteStarted(address)"(organizer?: null): VoteStartedEventFilter;
    VoteStarted(organizer?: null): VoteStartedEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    "castVote(address,uint8,uint256)"(
      voter: PromiseOrValue<string>,
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "castVote(uint8,uint256)"(
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closedAt(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initiateVotingPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ipfsAddr(overrides?: CallOverrides): Promise<BigNumber>;

    nAffirmative(overrides?: CallOverrides): Promise<BigNumber>;

    nVoters(overrides?: CallOverrides): Promise<BigNumber>;

    nVotes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payload(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "castVote(address,uint8,uint256)"(
      voter: PromiseOrValue<string>,
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "castVote(uint8,uint256)"(
      nature: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateVotingPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ipfsAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nAffirmative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
